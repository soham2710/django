jinja2 template engine
{{variable}} - for variables

{% %} - for control statements
{# #} - comments

JWT tokens - JSon Web tokens
secured data exchange format primarily used for authorization and authentication.


[eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9].[eyJ1c2VyX2lkIjoxMjMsInJvbGUiOiJhZG1pbiIsImV4cCI6MTcyOTkwMjQwMH0].[Signature]
[eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9] - Header
[eyJ1c2VyX2lkIjoxMjMsInJvbGUiOiJhZG1pbiIsImV4cCI6MTcyOTkwMjQwMH0] - Payload
Signature

RSA - Rivest - Shamir - Adleman 256
HMAC


Header - {"alg": "RSA256", "typ": "JWT"}
Payload - {"user_id": 123, "role":"admin", "exp": 1729902400}

bearer tokens - OAuth 2.0 - JWT

client side - what happens in browser
server side - what happens in django

https://dev.to/eklaassen/django-cheat-sheet-4fjd


1 - 1 - User - profile
1 - many - Author - blogs
many to many - blog posts and tags relationship

# Serializers - In DRF  the serializers.py file converts the complex data types in python data types,
which can be rendered in JSON and vice versa

"ALWAYS DEFINE YOUR PASSWORD IN SERIALIZERS FILE ONLY"

Built-in password validators
min length - 8 
common/weak passwords
numeric only passwords
userattributesimilarity

# Input
{
    "email": "soham456@gmail.com",
    "password": "12345678"
}

# backend
user = authenticate(username= "soham456@gmail.com", password = "12345678" )

{
 "response":"Invalid Credentials"
}